{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a27ec99f-e9e8-4345-ab7c-feaed71ced32",
   "metadata": {},
   "source": [
    "1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b172cb2-14d2-476f-8933-45c6fc4a5dbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import odeint\n",
    "\n",
    "def sdot(s, t, params, Pr):\n",
    "    M, P = s\n",
    "    km0, km, K, n, kdm, kp, kdp = params\n",
    "\n",
    "    rate_M_prod = km0 + km * (K**n / (Pr**n + K**n))\n",
    "    rate_M_loss = kdm * M\n",
    "\n",
    "    rate_P_prod = kp * M\n",
    "    rate_P_loss = kdp * P\n",
    "    \n",
    "    dM = rate_M_prod - rate_M_loss\n",
    "    dP = rate_P_prod - rate_P_loss\n",
    "    \n",
    "    return [dM, dP]\n",
    "\n",
    "# Define parameter values\n",
    "km0 = 0.01\n",
    "km = 5\n",
    "K = 500\n",
    "n = 2\n",
    "kdm = 0.1386\n",
    "kp = 1.2\n",
    "kdp = 0.0165\n",
    "\n",
    "params = [km0, km, K, n, kdm, kp, kdp]\n",
    "\n",
    "# Define initial conditions\n",
    "M0 = 0\n",
    "P0 = 0\n",
    "s0 = [M0, P0]\n",
    "\n",
    "# Define time observation points\n",
    "t_start = 0\n",
    "t_end = 1000\n",
    "t_obs = np.linspace(t_start, t_end, 1000)\n",
    "\n",
    "# Scenario 1: Repressor protein Pr is absent (Pr = 0)\n",
    "Pr0 = 0\n",
    "s_obs0 = odeint(sdot, s0, t_obs, args=(params, Pr0))\n",
    "\n",
    "# Scenario 2: Repressor protein Pr is at high levels (Pr = 3000)\n",
    "Pr3000 = 3000\n",
    "s_obs3000 = odeint(sdot, s0, t_obs, args=(params, Pr3000))\n",
    "\n",
    "# Plotting results\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(t_obs, s_obs0[:,0], label='mRNA Level (Pr=0)')\n",
    "plt.plot(t_obs, s_obs0[:,1], label='Protein Level (Pr=0)')\n",
    "plt.title('Protein Expression with Pr = 0')\n",
    "plt.xlabel('Time (minutes)')\n",
    "plt.ylabel('Concentration')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(t_obs, s_obs3000[:,0], label='mRNA Level (Pr=3000)')\n",
    "plt.plot(t_obs, s_obs3000[:,1], label='Protein Level (Pr=3000)')\n",
    "plt.title('Protein Expression with Pr = 3000')\n",
    "plt.xlabel('Time (minutes)')\n",
    "plt.ylabel('Concentration')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ea2de5d-e56f-496b-b121-a0e752a6156f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import odeint\n",
    "\n",
    "def sdot(s, t, params, Pr):\n",
    "    M, P = s\n",
    "    km0, km, K, n, kdm, kp, kdp = params\n",
    "\n",
    "    rate_M_prod = km0 + km * (K**n / (Pr**n + K**n))\n",
    "    rate_M_loss = kdm * M\n",
    "\n",
    "    rate_P_prod = kp * M\n",
    "    rate_P_loss = kdp * P\n",
    "    \n",
    "    dM = rate_M_prod - rate_M_loss\n",
    "    dP = rate_P_prod - rate_P_loss\n",
    "    \n",
    "    return [dM, dP]\n",
    "\n",
    "# Define parameter values\n",
    "km0 = 0.01\n",
    "km = 5\n",
    "K = 500\n",
    "kdm = 0.1386\n",
    "kp = 1.2\n",
    "kdp = 0.0165\n",
    "\n",
    "# Define Pr values to simulate\n",
    "Pr_vals = np.arange(0, 5000, 10)\n",
    "\n",
    "# Define time observation points\n",
    "t_start = 0\n",
    "t_end = 1000\n",
    "t_obs = np.linspace(t_start, t_end, 100)\n",
    "\n",
    "# Simulate for different values of n and collect steady state protein levels\n",
    "ns = [1, 2, 4]\n",
    "results = {}\n",
    "\n",
    "for n in ns:\n",
    "    P_ss_vals = []\n",
    "    params = [km0, km, K, n, kdm, kp, kdp]\n",
    "    for Pr in Pr_vals:\n",
    "        s0 = [0, 0]  # Initial conditions for M and P\n",
    "        s_obs = odeint(sdot, s0, t_obs, args=(params, Pr))\n",
    "        P_ss_vals.append(s_obs[-1, 1])  # Take the last value as steady state\n",
    "    results[n] = P_ss_vals\n",
    "\n",
    "# Plotting results\n",
    "fig, ax = plt.subplots(figsize=(10, 6))\n",
    "for n, P_ss_vals in results.items():\n",
    "    ax.plot(Pr_vals, P_ss_vals, label=f'n={n}')\n",
    "\n",
    "ax.set_xlabel('Repressor Protein Level (Pr)')\n",
    "ax.set_ylabel('Steady State Protein Level (P_ss)')\n",
    "ax.set_title('Protein Steady State Levels under Varying Repressor Levels and Cooperativity')\n",
    "ax.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96d6e51d-f4ee-4434-b50b-07c45feb33ad",
   "metadata": {},
   "source": [
    "2i."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "966d9567-2b9d-4981-83cc-fbe3f16c6243",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import odeint\n",
    "\n",
    "def sdot2(s, t, params):\n",
    "    ML, PL, MT, PT = s\n",
    "    km0L, kmL, KL, nL, kdmL, kpL, kdpL, km0T, kmT, KT, nT, kdmT, kpT, kdpT = params\n",
    "\n",
    "    rate_ML_prod = km0L + kmL * (KT**nT / (PT**nT + KT**nT))\n",
    "    rate_ML_loss = kdmL * ML\n",
    "\n",
    "    rate_PL_prod =  kpL * ML\n",
    "    rate_PL_loss =  kdpL * PL\n",
    "\n",
    "    rate_MT_prod = km0T + kmT * (KL**nL / (PL**nL + KL**nL))\n",
    "    rate_MT_loss = kdmT * MT\n",
    "\n",
    "    rate_PT_prod = kpT * MT\n",
    "    rate_PT_loss = kdpT * PT\n",
    "    \n",
    "    dML = rate_ML_prod - rate_ML_loss\n",
    "    dPL = rate_PL_prod - rate_PL_loss\n",
    "    dMT = rate_MT_prod - rate_MT_loss\n",
    "    dPT = rate_PT_prod - rate_PT_loss\n",
    "    \n",
    "    return [dML, dPL, dMT, dPT]\n",
    "\n",
    "# define parameter values\n",
    "km0L = 0.01\n",
    "kmL = 5\n",
    "KL = 500\n",
    "nL = 2\n",
    "kdmL = 0.1386\n",
    "kpL = 1.2\n",
    "kdpL = 0.0165\n",
    "\n",
    "km0T = 0.01\n",
    "kmT = 5\n",
    "KT = 500\n",
    "nT = 2\n",
    "kdmT = 0.1386\n",
    "kpT = 1.2\n",
    "kdpT = 0.0165\n",
    "\n",
    "params = [km0L, kmL, KL, nL, kdmL, kpL, kdpL, km0T, kmT, KT, nT, kdmT, kpT, kdpT]\n",
    "\n",
    "# Define two scenarios for initial conditions\n",
    "initial_conditions = [\n",
    "    [0, 0, 36, 2600],  # Starting with TetR expression close to its unrepressed level and no initial expression of LacI\n",
    "    [36, 2600, 0, 0]   # Starting with LacI expression close to its unrepressed level and no initial expression of TetR\n",
    "]\n",
    "\n",
    "t_start = 0\n",
    "t_end = 1000\n",
    "t_obs = np.arange(t_start, t_end+0.1, 1)\n",
    "\n",
    "# Simulate both scenarios\n",
    "results = []\n",
    "for s0 in initial_conditions:\n",
    "    s_obs = odeint(sdot2, s0, t_obs, args=(params,))\n",
    "    results.append(s_obs)\n",
    "\n",
    "# Plotting results\n",
    "plt.figure(figsize=(12, 6))\n",
    "labels = ['TetR high, LacI low', 'LacI high, TetR low']\n",
    "for i, result in enumerate(results):\n",
    "    plt.subplot(1, 2, i + 1)\n",
    "    plt.plot(t_obs, result[:, 1], label='LacI Protein')\n",
    "    plt.plot(t_obs, result[:, 3], label='TetR Protein')\n",
    "    plt.title(labels[i])\n",
    "    plt.xlabel('Time')\n",
    "    plt.ylabel('Protein Count')\n",
    "    plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "016aaf03-5bae-4426-97d9-956d086a5366",
   "metadata": {},
   "source": [
    "2ii)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50f370fd-6045-40bb-9f9d-1e1ae6e7e6b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import odeint\n",
    "\n",
    "def sdot_n1(s, t, params, n):\n",
    "    ML, PL, MT, PT = s\n",
    "    km0L, kmL, KL, kdmL, kpL, kdpL, km0T, kmT, KT, kdmT, kpT, kdpT = params\n",
    "\n",
    "    rate_ML_prod = km0L + kmL * (KT**n / (PT**n + KT**n))\n",
    "    rate_ML_loss = kdmL * ML\n",
    "\n",
    "    rate_PL_prod = kpL * ML\n",
    "    rate_PL_loss = kdpL * PL\n",
    "\n",
    "    rate_MT_prod = km0T + kmT * (KL**n / (PL**n + KL**n))\n",
    "    rate_MT_loss = kdmT * MT\n",
    "\n",
    "    rate_PT_prod = kpT * MT\n",
    "    rate_PT_loss = kdpT * PT\n",
    "    \n",
    "    return [rate_ML_prod - rate_ML_loss, rate_PL_prod - rate_PL_loss, rate_MT_prod - rate_MT_loss, rate_PT_prod - rate_PT_loss]\n",
    "\n",
    "# Parameter values\n",
    "params = [0.01, 5, 500, 0.1386, 1.2, 0.0165, 0.01, 5, 500, 0.1386, 1.2, 0.0165]\n",
    "n = 1  # Cooperativity factor\n",
    "\n",
    "# Initial conditions for two scenarios\n",
    "initial_conditions = [\n",
    "    [0, 0, 36, 2600],  # TetR high, LacI low\n",
    "    [36, 2600, 0, 0]   # LacI high, TetR low\n",
    "]\n",
    "\n",
    "t_obs = np.linspace(0, 1000, 1000)  # Observation times\n",
    "\n",
    "# Run simulation for both scenarios\n",
    "results_n1 = []\n",
    "for s0 in initial_conditions:\n",
    "    result = odeint(sdot_n1, s0, t_obs, args=(params, n))\n",
    "    results_n1.append(result)\n",
    "\n",
    "# Plot results for n=1\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.suptitle(\"Toggle Switch System Behavior at n=1\")\n",
    "for i, result in enumerate(results_n1):\n",
    "    plt.subplot(1, 2, i+1)\n",
    "    plt.plot(t_obs, result[:, 1], label='LacI Protein')\n",
    "    plt.plot(t_obs, result[:, 3], label='TetR Protein')\n",
    "    plt.title(['TetR high, LacI low', 'LacI high, TetR low'][i])\n",
    "    plt.xlabel('Time (minutes)')\n",
    "    plt.ylabel('Protein count')\n",
    "    plt.legend()\n",
    "plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c4e4eac-b8ba-468a-9416-3e86fceff459",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_vals = np.arange(1, 4.1, 0.1)\n",
    "PL_final_1 = []\n",
    "PL_final_2 = []\n",
    "\n",
    "for n in n_vals:\n",
    "    final_results = []\n",
    "    for s0 in initial_conditions:\n",
    "        result = odeint(sdot_n1, s0, np.linspace(0, 10000, 10000), args=(params, n))\n",
    "        final_results.append(result[-1, 1])\n",
    "    PL_final_1.append(final_results[0])\n",
    "    PL_final_2.append(final_results[1])\n",
    "\n",
    "# Plot bifurcation plot\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(n_vals, PL_final_1, label='Final PL (TetR high initial)')\n",
    "plt.plot(n_vals, PL_final_2, label='Final PL (LacI high initial)')\n",
    "plt.xlabel('n value')\n",
    "plt.ylabel('Final LacI Protein Level (PL)')\n",
    "plt.title('Bifurcation Plot of Toggle Switch System')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6adb75e8-8615-45c1-931d-3ce2363c993a",
   "metadata": {},
   "source": [
    "2iii)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c61873b8-0038-4e69-9545-62ceffb99519",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import odeint\n",
    "\n",
    "def sdot3(s, t, params):\n",
    "    PL, PT = s\n",
    "    vp0L, vpL, vdpL, KL, nL, vp0T, vpT, vdpT, KT, nT = params\n",
    "\n",
    "    rate_PL_prod = vp0L + vpL * (KT**nT / (PT**nT + KT**nT))\n",
    "    rate_PL_loss = vdpL * PL\n",
    "\n",
    "    rate_PT_prod = vp0T + vpT * (KL**nL / (PL**nL + KL**nL))\n",
    "    rate_PT_loss = vdpT * PT\n",
    "    \n",
    "    dPL = rate_PL_prod - rate_PL_loss\n",
    "    dPT = rate_PT_prod - rate_PT_loss\n",
    "    \n",
    "    return [dPL, dPT]\n",
    "\n",
    "# Define parameter values\n",
    "vp0L = 0.0866\n",
    "vpL = 43.3\n",
    "vdpL = 0.0165\n",
    "KL = 500\n",
    "nL = 2\n",
    "\n",
    "vp0T = 0.0866\n",
    "vpT = 43.3\n",
    "vdpT = 0.0165\n",
    "KT = 500\n",
    "nT = 2\n",
    "\n",
    "params = [vp0L, vpL, vdpL, KL, nL, vp0T, vpT, vdpT, KT, nT]\n",
    "\n",
    "# Initial conditions\n",
    "s0_vals = [\n",
    "    [1000, 2600],  # PL, PT\n",
    "    [2600, 1000],\n",
    "    [500, 200],\n",
    "    [200, 500]\n",
    "]\n",
    "\n",
    "t_obs = np.linspace(0, 1000, 1000)  # Observation times\n",
    "\n",
    "# Plotting\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(1, 1, 1)\n",
    "\n",
    "for s0 in s0_vals:\n",
    "    s_obs = odeint(sdot3, s0, t_obs, args=(params,))\n",
    "    PL_obs = s_obs[:, 0]\n",
    "    PT_obs = s_obs[:, 1]\n",
    "    ax.plot(PL_obs, PT_obs, label=f'Initial PL={s0[0]}, PT={s0[1]}')\n",
    "\n",
    "# Nullclines\n",
    "PT_vals = np.linspace(0, 3000, 300)\n",
    "PL_nullcline = [((vp0L / vdpL) + (vpL / vdpL) * (KT**nT / (pt**nT + KT**nT))) for pt in PT_vals]\n",
    "PT_nullcline = [((vp0T / vdpT) + (vpT / vdpT) * (KL**nL / (pl**nL + KL**nL))) for pl in PL_nullcline]\n",
    "\n",
    "ax.plot(PL_nullcline, PT_vals, 'r--', label='PL Nullcline')\n",
    "ax.plot(PT_nullcline, PL_nullcline, 'b--', label='PT Nullcline')\n",
    "\n",
    "ax.set_xlim([0, 3000])\n",
    "ax.set_ylim([0, 3000])\n",
    "ax.set_xlabel('LacI Protein (PL)')\n",
    "ax.set_ylabel('TetR Protein (PT)')\n",
    "ax.set_title('Phase Plot of Toggle Switch System')\n",
    "ax.legend()\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0f01626-d8cf-498a-af01-688dd0fd270d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import odeint\n",
    "\n",
    "def sdot3(s, t, params):\n",
    "    PL, PT = s\n",
    "    vp0L, vpL, vdpL, KL, nL, vp0T, vpT, vdpT, KT, nT = params\n",
    "\n",
    "    rate_PL_prod = vp0L + vpL * (KT**nT / (PT**nT + KT**nT))\n",
    "    rate_PL_loss = vdpL * PL\n",
    "\n",
    "    rate_PT_prod = vp0T + vpT * (KL**nL / (PL**nL + KL**nL))\n",
    "    rate_PT_loss = vdpT * PT\n",
    "    \n",
    "    return [rate_PL_prod - rate_PL_loss, rate_PT_prod - rate_PT_loss]\n",
    "\n",
    "# Define parameter values with nL and nT set to 1\n",
    "vp0L = 0.0866\n",
    "vpL = 43.3\n",
    "vdpL = 0.0165\n",
    "KL = 500\n",
    "nL = 1  # Reduced cooperativity\n",
    "\n",
    "vp0T = 0.0866\n",
    "vpT = 43.3\n",
    "vdpT = 0.0165\n",
    "KT = 500\n",
    "nT = 1  # Reduced cooperativity\n",
    "\n",
    "params = [vp0L, vpL, vdpL, KL, nL, vp0T, vpT, vdpT, KT, nT]\n",
    "\n",
    "# Initial conditions\n",
    "s0_vals = [\n",
    "    [1000, 2600],  # PL, PT\n",
    "    [2600, 1000],\n",
    "    [500, 200],\n",
    "    [200, 500]\n",
    "]\n",
    "\n",
    "t_obs = np.linspace(0, 1000, 1000)  # Observation times\n",
    "\n",
    "# Plotting\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(1, 1, 1)\n",
    "\n",
    "for s0 in s0_vals:\n",
    "    s_obs = odeint(sdot3, s0, t_obs, args=(params,))\n",
    "    PL_obs = s_obs[:, 0]\n",
    "    PT_obs = s_obs[:, 1]\n",
    "    ax.plot(PL_obs, PT_obs, label=f'Initial PL={s0[0]}, PT={s0[1]}')\n",
    "\n",
    "# Nullclines\n",
    "PT_vals = np.linspace(0, 3000, 300)\n",
    "PL_nullcline = [((vp0L / vdpL) + (vpL / vdpL) * (KT**nT / (pt**nT + KT**nT))) for pt in PT_vals]\n",
    "PT_nullcline = [((vp0T / vdpT) + (vpT / vdpT) * (KL**nL / (pl**nL + KL**nL))) for pl in PL_nullcline]\n",
    "\n",
    "ax.plot(PL_nullcline, PT_vals, 'r--', label='PL Nullcline')\n",
    "ax.plot(PT_nullcline, PL_nullcline, 'b--', label='PT Nullcline')\n",
    "\n",
    "ax.set_xlim([0, 3000])\n",
    "ax.set_ylim([0, 3000])\n",
    "ax.set_xlabel('LacI Protein (PL)')\n",
    "ax.set_ylabel('TetR Protein (PT)')\n",
    "ax.set_title('Phase Plot of Toggle Switch System with n=1')\n",
    "ax.legend()\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1665e88c-aadb-4680-966b-4d2b5bfca140",
   "metadata": {},
   "source": [
    "3i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9cbb831f-2e12-4eb5-845a-c3461adf23c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import odeint\n",
    "\n",
    "def sdot(s, t, params):\n",
    "    ML, PL, MT, PT = s\n",
    "    km0L, kmL, KT, nT, kdmL, kpL, kdpL, km0T, kmT, KL, nL, kdmT, kpT, kdpT = params\n",
    "\n",
    "    rate_ML_prod = km0L + kmL * (KT**nT / (PT**nT + KT**nT))\n",
    "    rate_ML_loss = kdmL * ML\n",
    "\n",
    "    rate_PL_prod = kpL * ML\n",
    "    rate_PL_loss = kdpL * PL\n",
    "\n",
    "    rate_MT_prod = km0T + kmT * (KL**nL / (PL**nL + KL**nL))\n",
    "    rate_MT_loss = kdmT * MT\n",
    "\n",
    "    rate_PT_prod = kpT * MT\n",
    "    rate_PT_loss = kdpT * PT\n",
    "    \n",
    "    dML = rate_ML_prod - rate_ML_loss\n",
    "    dPL = rate_PL_prod - rate_PL_loss\n",
    "    dMT = rate_MT_prod - rate_MT_loss\n",
    "    dPT = rate_PT_prod - rate_PT_loss\n",
    "    \n",
    "    return [dML, dPL, dMT, dPT]\n",
    "\n",
    "# Parameter values from Lugange et al.\n",
    "params = [\n",
    "    0.032, 8.30, 30, 2, 0.1386, 0.9726, 0.0165, # LacI parameters\n",
    "    0.119, 2.06, 31.94, 2, 0.1386, 1.170, 0.0165  # TetR parameters\n",
    "]\n",
    "\n",
    "# Initial conditions\n",
    "initial_conditions = [\n",
    "    [10, 500, 10, 10],   # Close to one stable state\n",
    "    [10, 10, 10, 500]    # Close to another stable state\n",
    "]\n",
    "\n",
    "t_obs = np.linspace(0, 1000, 1000)  # Observation times\n",
    "\n",
    "# Simulate and plot\n",
    "fig, axs = plt.subplots(2, 2, figsize=(12, 12))\n",
    "\n",
    "for i, s0 in enumerate(initial_conditions):\n",
    "    s_obs = odeint(sdot, s0, t_obs, args=(params,))\n",
    "    ML_obs, PL_obs, MT_obs, PT_obs = s_obs[:, 0], s_obs[:, 1], s_obs[:, 2], s_obs[:, 3]\n",
    "\n",
    "    # Expression vs Time plot\n",
    "    axs[i, 0].plot(t_obs, PL_obs, label='LacI Protein')\n",
    "    axs[i, 0].plot(t_obs, PT_obs, label='TetR Protein')\n",
    "    axs[i, 0].set_xlabel('Time')\n",
    "    axs[i, 0].set_ylabel('Protein count')\n",
    "    axs[i, 0].set_title(f'Expression Over Time (Initial PL={s0[1]}, PT={s0[3]})')\n",
    "    axs[i, 0].legend()\n",
    "\n",
    "    # Phase plot\n",
    "    axs[i, 1].plot(PL_obs, PT_obs)\n",
    "    axs[i, 1].set_xlabel('LacI Protein')\n",
    "    axs[i, 1].set_ylabel('TetR Protein')\n",
    "    axs[i, 1].set_title('Phase Plot')\n",
    "    axs[i, 1].set_xlim([0, 1000])\n",
    "    axs[i, 1].set_ylim([0, 1000])\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07cf33ae-e687-40a1-a6d4-d1143b1b10f4",
   "metadata": {},
   "source": [
    "3ii)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "895b5b0a-8a17-433d-95ab-f45e26bdb75f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "\n",
    "# Gillespie simulation function\n",
    "def gillespie_toggle(s0, t_obs_out, param):\n",
    "    km0L, kmL, KL, nL, kdmL, kpL, kdpL, km0T, kmT, KT, nT, kdmT, kpT, kdpT = param\n",
    "    ML, PL, MT, PT = s0\n",
    "\n",
    "    s_obs = [s0]\n",
    "    t_obs = [t_obs_out[0]]\n",
    "    t = t_obs_out[0]\n",
    "\n",
    "    while t < t_obs_out[-1]:\n",
    "        # Event types\n",
    "        types = ['ML_prod', 'ML_deg', 'PL_prod', 'PL_deg', 'MT_prod', 'MT_deg', 'PT_prod', 'PT_deg']\n",
    "\n",
    "        # Calculate reaction rates\n",
    "        rate_ML_prod = km0L + kmL * (KT**nT / (PT**nT + KT**nT))\n",
    "        rate_ML_deg = kdmL * ML\n",
    "        rate_PL_prod = kpL * ML\n",
    "        rate_PL_deg = kdpL * PL\n",
    "        rate_MT_prod = km0T + kmT * (KL**nL / (PL**nL + KL**nL))\n",
    "        rate_MT_deg = kdmT * MT\n",
    "        rate_PT_prod = kpT * MT\n",
    "        rate_PT_deg = kdpT * PT\n",
    "\n",
    "        rates = [rate_ML_prod, rate_ML_deg, rate_PL_prod, rate_PL_deg, rate_MT_prod, rate_MT_deg, rate_PT_prod, rate_PT_deg]\n",
    "\n",
    "        total_rate = sum(rates)\n",
    "        if total_rate == 0:\n",
    "            break\n",
    "\n",
    "        # Time to next event\n",
    "        next_event_time = gen_next_event_time(total_rate)\n",
    "        t += next_event_time\n",
    "\n",
    "        # Determine which event occurs\n",
    "        event_index = random_choice_from_pdf([rate / total_rate for rate in rates])\n",
    "        event_type = types[event_index]\n",
    "\n",
    "        # Update counts based on event\n",
    "        if event_type == 'ML_prod':\n",
    "            ML += 1\n",
    "        elif event_type == 'ML_deg':\n",
    "            ML = max(ML - 1, 0)\n",
    "        elif event_type == 'PL_prod':\n",
    "            PL += 1\n",
    "        elif event_type == 'PL_deg':\n",
    "            PL = max(PL - 1, 0)\n",
    "        elif event_type == 'MT_prod':\n",
    "            MT += 1\n",
    "        elif event_type == 'MT_deg':\n",
    "            MT = max(MT - 1, 0)\n",
    "        elif event_type == 'PT_prod':\n",
    "            PT += 1\n",
    "        elif event_type == 'PT_deg':\n",
    "            PT = max(PT - 1, 0)\n",
    "\n",
    "        s_obs.append((ML, PL, MT, PT))\n",
    "        t_obs.append(t)\n",
    "\n",
    "    s_obs_out = resample_observations(t_obs, s_obs, t_obs_out)\n",
    "    return np.array(s_obs_out)\n",
    "\n",
    "# Parameters for the Toggle Switch\n",
    "params = [0.032, 8.3, 30, 2, 0.1386, 0.9726, 0.0165, 0.119, 2.06, 31.94, 2, 0.1386, 1.170, 0.0165]\n",
    "\n",
    "# Initial conditions for LacI high and TetR high\n",
    "s0_LacI_high = [0, 2600, 0, 100]\n",
    "s0_TetR_high = [0, 100, 0, 2600]\n",
    "\n",
    "# Define observation times\n",
    "t_obs = np.linspace(0, 1000, 1000)\n",
    "\n",
    "# Run multiple simulations for each initial condition\n",
    "results_LacI_high = [gillespie_toggle(s0_LacI_high, t_obs, params) for _ in range(5)]\n",
    "results_TetR_high = [gillespie_toggle(s0_TetR_high, t_obs, params) for _ in range(5)]\n",
    "\n",
    "# Plot results for LacI high initial state\n",
    "plt.figure(figsize=(12, 6))\n",
    "for result in results_LacI_high:\n",
    "    plt.plot(t_obs, result[:, 1], label='LacI Protein')\n",
    "    plt.plot(t_obs, result[:, 3], label='TetR Protein', alpha=0.5)\n",
    "plt.title('Toggle Switch Dynamics (LacI High Initial State)')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Protein Count')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Plot results for TetR high initial state\n",
    "plt.figure(figsize=(12, 6))\n",
    "for result in results_TetR_high:\n",
    "    plt.plot(t_obs, result[:, 1], label='LacI Protein', alpha=0.5)\n",
    "    plt.plot(t_obs, result[:, 3], label='TetR Protein')\n",
    "plt.title('Toggle Switch Dynamics (TetR High Initial State)')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Protein Count')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c342c9d2-133e-4f03-8ba5-e3669a3c90c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "\n",
    "# Parameters for the Toggle Switch\n",
    "params = [0.032, 8.3, 30, 2, 0.1386, 0.9726, 0.0165, 0.119, 2.06, 31.94, 2, 0.1386, 1.170, 0.0165]\n",
    "\n",
    "# Initial conditions\n",
    "s0_LacI_high = [0, 2600, 0, 100]  # ML0, PL0, MT0, PT0 (High LacI state)\n",
    "s0_TetR_high = [0, 100, 0, 2600]  # ML0, PL0, MT0, PT0 (High TetR state)\n",
    "\n",
    "# Observation time\n",
    "t_obs = np.linspace(0, 1000, 1001)\n",
    "\n",
    "# Run simulations\n",
    "num_runs = 100\n",
    "results_LacI_high = [gillespie_toggle(s0_LacI_high, t_obs, params) for _ in range(num_runs)]\n",
    "results_TetR_high = [gillespie_toggle(s0_TetR_high, t_obs, params) for _ in range(num_runs)]\n",
    "\n",
    "# Collect final mRNA and protein levels\n",
    "final_ML_LacI = [res[-1, 0] for res in results_LacI_high]\n",
    "final_PL_LacI = [res[-1, 1] for res in results_LacI_high]\n",
    "final_MT_LacI = [res[-1, 2] for res in results_LacI_high]\n",
    "final_PT_LacI = [res[-1, 3] for res in results_LacI_high]\n",
    "\n",
    "final_ML_TetR = [res[-1, 0] for res in results_TetR_high]\n",
    "final_PL_TetR = [res[-1, 1] for res in results_TetR_high]\n",
    "final_MT_TetR = [res[-1, 2] for res in results_TetR_high]\n",
    "final_PT_TetR = [res[-1, 3] for res in results_TetR_high]\n",
    "\n",
    "# Calculate summary statistics\n",
    "mean_PL_LacI = np.mean(final_PL_LacI)\n",
    "std_PL_LacI = np.std(final_PL_LacI)\n",
    "mean_PT_LacI = np.mean(final_PT_LacI)\n",
    "std_PT_LacI = np.std(final_PT_LacI)\n",
    "\n",
    "mean_PL_TetR = np.mean(final_PL_TetR)\n",
    "std_PL_TetR = np.std(final_PL_TetR)\n",
    "mean_PT_TetR = np.mean(final_PT_TetR)\n",
    "std_PT_TetR = np.std(final_PT_TetR)\n",
    "\n",
    "# Plot histograms\n",
    "plt.figure(figsize=(12, 10))\n",
    "\n",
    "plt.subplot(2, 2, 1)\n",
    "plt.hist(final_PL_LacI, bins=20, alpha=0.7, color='blue')\n",
    "plt.title('LacI Protein Levels (High LacI Initial)')\n",
    "plt.xlabel('Protein Count')\n",
    "plt.ylabel('Frequency')\n",
    "plt.axvline(mean_PL_LacI, color='r', linestyle='dashed', linewidth=1)\n",
    "plt.text(mean_PL_LacI + std_PL_LacI, max(plt.ylim())*0.9, f'Mean: {mean_PL_LacI:.2f}\\nSD: {std_PL_LacI:.2f}')\n",
    "\n",
    "plt.subplot(2, 2, 2)\n",
    "plt.hist(final_PT_LacI, bins=20, alpha=0.7, color='green')\n",
    "plt.title('TetR Protein Levels (High LacI Initial)')\n",
    "plt.xlabel('Protein Count')\n",
    "plt.ylabel('Frequency')\n",
    "plt.axvline(mean_PT_LacI, color='r', linestyle='dashed', linewidth=1)\n",
    "plt.text(mean_PT_LacI + std_PT_LacI, max(plt.ylim())*0.9, f'Mean: {mean_PT_LacI:.2f}\\nSD: {std_PT_LacI:.2f}')\n",
    "\n",
    "plt.subplot(2, 2, 3)\n",
    "plt.hist(final_PL_TetR, bins=20, alpha=0.7, color='blue')\n",
    "plt.title('LacI Protein Levels (High TetR Initial)')\n",
    "plt.xlabel('Protein Count')\n",
    "plt.ylabel('Frequency')\n",
    "plt.axvline(mean_PL_TetR, color='r', linestyle='dashed', linewidth=1)\n",
    "plt.text(mean_PL_TetR + std_PL_TetR, max(plt.ylim())*0.9, f'Mean: {mean_PL_TetR:.2f}\\nSD: {std_PL_TetR:.2f}')\n",
    "\n",
    "plt.subplot(2, 2, 4)\n",
    "plt.hist(final_PT_TetR, bins=20, alpha=0.7, color='green')\n",
    "plt.title('TetR Protein Levels (High TetR Initial)')\n",
    "plt.xlabel('Protein Count')\n",
    "plt.ylabel('Frequency')\n",
    "plt.axvline(mean_PT_TetR, color='r', linestyle='dashed', linewidth=1)\n",
    "plt.text(mean_PT_TetR + std_PT_TetR, max(plt.ylim())*0.9, f'Mean: {mean_PT_TetR:.2f}\\nSD: {std_PT_TetR:.2f}')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
